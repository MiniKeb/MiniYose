<style>
.minesweeper 
{
	border: 2px solid #888888;
	border-collapse: collapse;
}

.minesweeper td
{
	border: 2px solid #888888;
	background-color: #DDDDDD;
	width: 15px;
	height: 15px;
	padding: 0;
	text-align: center;
	font-size: 0.8em;
}

.minesweeper td.lost{
	background-color: #FF0000;
}

.minesweeper td.safe{
	background-color: #FFFFFF;
}
</style>

<script>
function load(){
	for(var rowIndex in document.grid)
	{
		var lineIx = parseInt(rowIndex);
		for(var cellIndex in document.grid[lineIx])
		{
			var cellIx = parseInt(cellIndex);
			var cell = getCell(cellIx, lineIx);

			if(document.grid[lineIx][cellIx] == "empty" && cell.getAttribute("data-value") == null){
				cell.setAttribute("data-value", "0");
			}else if (document.grid[lineIx][cellIx] == "bomb"){
				cell.setAttribute("data-value", "X");
				var gridSize = {
					width : document.grid[lineIx].length,
					height : document.grid.length
				};
				document.gridSize = gridSize;

				//incrementNeighbourgs(cellIx, lineIx, gridSize);
				var neighbourgs = getNeighbourgs(cellIx, lineIx, gridSize);
				for(var i = 0; i < neighbourgs.length; i++){
					incrementValue(neighbourgs[i]);
				}
			}

			cell.setAttribute("onclick", "javascript:reveal(this);")
		}
	}
}

function incrementNeighbourgs(currentCellIndex, currentLineIndex, gridSize){
	for(var y = -1; y <= 1; y++){
		for(var x = -1; x <= 1; x++){
			var isCurrent = (y == 0) && (x == 0);
			if (!isCurrent){
				var neighbourgLine = currentLineIndex + y;
				var neighbourgCell = currentCellIndex + x;

				var isInTable = neighbourgLine >= 0 && neighbourgCell >= 0
					&& neighbourgLine < gridSize.height && neighbourgCell < gridSize.width;

				if(isInTable){
					var neighbourg = getCell(neighbourgCell, neighbourgLine);
					incrementValue(neighbourg);
				}
			}
		}
	}
}

function getPosition(cell){
	var currentPosition = cell.id.split("-")[1].split("x");
	var currentLineIndex = parseInt(currentPosition[0]) - 1;
	var currentCellIndex = parseInt(currentPosition[1]) - 1;

	return {
		x: currentCellIndex,
		y: currentLineIndex
	};
}

function getNeighbourgs(cellIx, lineIx, gridSize){
	var neighbourgs = [];

	for(var y = -1; y <= 1; y++){
		for(var x = -1; x <= 1; x++){
			var isCurrent = (y == 0) && (x == 0);
			if (!isCurrent){
				var neighbourgLine = lineIx + y;
				var neighbourgCell = cellIx + x;

				var isInTable = neighbourgLine >= 0 
					&& neighbourgCell >= 0
					&& neighbourgLine < gridSize.height 
					&& neighbourgCell < gridSize.width;

				if(isInTable){
					var neighbourg = getCell(neighbourgCell, neighbourgLine);
					neighbourgs.push(neighbourg);
				}
			}
		}
	}

	return neighbourgs;
}

function getCell(x, y){
	return document.getElementById("cell-"+ (y+1) +"x"+ (x+1));
}

function incrementValue(cell){
	var value = cell.getAttribute("data-value");
	if(value == null){
		value = "0"
	}
	if (value != "X"){
		cell.setAttribute("data-value", parseInt(value)+1);
	}
}

function reveal(cell){
	var value = cell.getAttribute("data-value");
	if (value == "X"){
		cell.setAttribute("class", "lost");
	}else{
		cell.setAttribute("class", "safe");
		if(parseInt(value) > 0){
			cell.innerHTML = value;
		}else{
			cell.innerHTML = "";
			//getNeighbourgs and reveal
			var position = getPosition(cell);
			var neighbourgs = getNeighbourgs(position.x, position.y, document.gridSize);
			for(var i = 0; i < neighbourgs.length; i++){
				var neighbourg = neighbourgs[i];
				console.log(neighbourg.id);
				var cssClass = neighbourg.getAttribute("class");
				if (!cssClass){
					reveal(neighbourg);
				}
			}
		}
	}
}
</script>

<h1 id="title">Minesweeper</h1>
<table class="minesweeper">
	{{#each cells}}
	<tr>
		{{#each this}}
		<td id="{{this}}">&nbsp;</td>
		{{/each}}
	</tr>
	{{/each}}
</table>